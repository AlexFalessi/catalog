schema {
    query: Query
}

type Query {
    allCatalogObjects(where: CatalogObjectWhereArgs, first: Int, last: Int, after: String, before: String): CatalogObjectConnection
}

input CatalogObjectMetadataWhereArgs {
    key: String
    value: StringWhereArgs
}

input StringWhereArgs {
    like: String
    notLike: String
    eq: String
    ne: String
}

input CatalogObjectBucketIdWhereArgs{
    in: [Long]
    notIn: [Long]
    eq: Long
    ne: Long
    gt: Long
    gte: Long
    lt: Long
    lte: Long
}

input CatalogObjectKindWhereArgs{
    like: String
    notLike: String
    eq: String
    ne: String
}

input CatalogObjectNameWhereArgs{
    like: String
    notLike: String
    eq: String
    ne: String
}

input CatalogObjectWhereArgs {
   AND: [CatalogObjectWhereArgs!]
   OR: [CatalogObjectWhereArgs!]
   bucketIdArg: CatalogObjectBucketIdWhereArgs
   nameArg: CatalogObjectNameWhereArgs
   kindArg: CatalogObjectKindWhereArgs
   metadataArg: CatalogObjectMetadataWhereArgs
}

type CatalogObjectConnection {
    edges: [Edge!]!
    pageInfo: PageInfo
    totalCount: Int
}

type Edge {
    node: CatalogObject
    cursor: ConnectionCursor
}

type PageInfo {
    startCursor: ConnectionCursor
    endCursor: ConnectionCursor
    hasPreviousPage: Boolean
    hasNextPage: Boolean
}

type ConnectionCursor {
    value: String
}

type MetaData {
    key: String!
    value: String!
    label: String
}

type CatalogObject {
    bucketId: ID!
    commitDateTime: Long!
    commitMessage: String
    contentType: String
    metaData: [MetaData!]
    kind: String!
    link: String
    name: String!
}


