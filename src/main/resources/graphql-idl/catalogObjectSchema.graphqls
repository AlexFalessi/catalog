schema {
    query: Query
}

type Query {
    allCatalogObjects(where: CatalogObjectWhereArgs, first: Int, last: Int, after: String, before: String): CatalogObjectConnection
}

type CatalogObjectMetadataArgs {
    key: String
    value: String
}

type CatalogObjectBucketIdWhereArgs{
    in: [Long]
    notIn: [Long]
    eq: Long
    ne: Long
    gt: Long
    gte: Long
    lt: Long
    lte: Long
}

type CatalogObjectHavingMetadataWhereArgs {
    keyValues: [CatalogObjectMetadataArgs]
}

type CatalogObjectKindWhereArgs{
    like: String
    notLike: String
    eq: String
    ne: String
    gt: String
    gte: String
    lt: String
    lte: String
}

CatalogObjectNameWhereArgs{
    like: String
    notLike: String
    eq: String
    ne: String
    gt: String
    gte: String
    lt: String
    lte: String
}

type CatalogObjectRevisionWhereArgs extends WhereArgs {
    isLatest: Boolean
    eq: Long
    ne: Long
    gt: Long
    gte: Long
    lt: Long
    lte: Long
}

type CatalogObjectWhereArgs {
   AND: [CatalogObjectWhereArgs!]
   OR: [CatalogObjectWhereArgs!]
   bucketId: BucketIdWhereArgs
   name: CatalogObjectNameWhereArgs
   kind: CatalogObjectKindWhereArgs
   content_type: CatalogObjectContentTypeWhereArgs
   metadata: CatalogObjectMetadataWhereArgs
}


type CatalogObjectConnection {
    edges: [Edge!]!
    pageInfo: PageInfo
    totalCount: Int
}

type MetaData {
    key: String
    value: String
    label: String
}

type CatalogObject {
    bucketId: ID!
    commitDateTime: Long!
    commitMessage: String
    contentType: String
    metaData: [MetaData!]
    kind: String!
    link: String
    name: String
}


